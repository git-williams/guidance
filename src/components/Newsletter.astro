---
// No frontmatter needed
---
<section class="newsletter-section">
  <div class="newsletter-container">
    <!-- Left Side: Title, Description, Nav Buttons -->
    <div class="newsletter-left">
      <h1 class="newsletter-title">Find Beauty in<br />the Details</h1>
      <p class="newsletter-description">
        Subscribe for rare insights, original ideas, and distilled content. No fluff. Just the signal.
      </p>

      <div class="newsletter-buttons">
        <a href="#" class="newsletter-link-button">Read the Blog</a>
        <a href="#" class="newsletter-link-button">Contact Me</a>
        <a href="#" class="newsletter-link-button">Learn More</a>
      </div>
    </div>

    <!-- Right Side: Form -->
    <div class="newsletter-right">
      <form id="newsletterForm" class="newsletter-form" novalidate autocomplete="email">
        <div class="success-message-container">
          <p class="form-message" id="formMessage" aria-live="polite" aria-atomic="true" role="alert"></p>
        </div>
        <input
          type="email"
          id="emailInput"
          placeholder="Enter your email"
          autocomplete="email"
          required
          aria-label="Email address"
        />
        <button type="submit" class="submit-button">Start Reading</button>
        <input
          type="text"
          name="website"
          id="website"
          style="display: none"
          tabindex="-1"
          autocomplete="off"
          aria-hidden="true"
        />
      </form>
    </div>
  </div>
</section>

<script is:inline>
  document.addEventListener('DOMContentLoaded', function () {
    const form = document.getElementById('newsletterForm');
    const input = document.getElementById('emailInput');
    const message = document.getElementById('formMessage');
    const honeypot = document.getElementById('website');
    const button = form.querySelector('button[type="submit"]');

// Desktop interaction simulation
    button.addEventListener('mouseenter', () => {
      if (window.matchMedia('(hover: hover) and (pointer: fine)').matches) {
        button.classList.add('hovered');
      }
    });

    button.addEventListener('mouseleave', () => {
      button.classList.remove('hovered', 'clicked');
    });

    button.addEventListener('mousedown', () => {
      if (window.matchMedia('(hover: hover) and (pointer: fine)').matches) {
        button.classList.add('clicked');
      }
    });

    button.addEventListener('mouseup', () => {
      button.classList.remove('clicked');
      button.classList.add('hovered');
    });

        // Apply the same interaction to all link buttons
const linkButtons = document.querySelectorAll('.newsletter-link-button');

linkButtons.forEach(link => {
  link.addEventListener('mouseenter', () => {
    if (window.matchMedia('(hover: hover) and (pointer: fine)').matches) {
      link.classList.add('hovered');
    }
  });

  link.addEventListener('mouseleave', () => {
    link.classList.remove('hovered', 'clicked');
  });

  link.addEventListener('mousedown', () => {
    if (window.matchMedia('(hover: hover) and (pointer: fine)').matches) {
      link.classList.add('clicked');
    }
  });

  link.addEventListener('mouseup', () => {
    link.classList.remove('clicked');
    link.classList.add('hovered');
  });
});

// On mobile/touch devices: trigger bounce on button click
button.addEventListener('click', () => {
  // Only on devices without hover (mobile)
  if (!window.matchMedia('(hover: hover) and (pointer: fine)').matches) {
    // Remove bounce class if it's still there (to allow re-trigger)
    button.classList.remove('bounce');
    // Trigger reflow to restart animation
    void button.offsetWidth;
    // Add bounce class to start animation
    button.classList.add('bounce');
  }
});




    let messageActive = false;

function showMessage(text, color) {
  if (messageActive) return; // prevent new messages until previous is done
  messageActive = true;

  message.textContent = text;
  message.style.color = color;

  message.classList.remove('show', 'hide');
  void message.offsetWidth; // force reflow
  message.classList.add('show');

  setTimeout(() => {
    message.classList.remove('show');
    message.classList.add('hide');
  }, 3000);

  setTimeout(() => {
    message.classList.remove('hide');
    message.textContent = '';
    messageActive = false; // allow next message
  }, 3500);
}

    form.addEventListener('submit', async function (e) {
      e.preventDefault(); // ðŸ’¥ prevent page reload
      if (honeypot.value !== '') return;

      const email = input.value.trim();
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

      if (!email) {
        showMessage('Email is required', '#ff6666');
        return;
      }

      if (!emailRegex.test(email)) {
        showMessage('Please enter a valid email address', '#ff6666');
        return;
      }

      button.disabled = true;

      try {
        const res = await fetch('https://formspree.io/f/mgvkqowp', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ email }),
        });

        if (res.ok) {
          showMessage("Thanks! You're on the list", '#66ff99');
          input.value = '';
          form.reset();
        } else {
          showMessage('Something went wrong. Please try again.', '#ff6666');
        }
      } catch (err) {
        showMessage('Network error. Try again later.', '#ff6666');
      } finally {
        button.disabled = false;
      }
    });
  });
</script>
